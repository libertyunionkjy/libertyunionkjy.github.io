<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柯柯的博客</title>
  
  <subtitle>KK&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jyke.xyz/"/>
  <updated>2022-01-05T07:54:51.986Z</updated>
  <id>https://jyke.xyz/</id>
  
  <author>
    <name>Keke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux设备模型</title>
    <link href="https://jyke.xyz/posts/42100.html"/>
    <id>https://jyke.xyz/posts/42100.html</id>
    <published>2022-01-05T07:49:13.000Z</published>
    <updated>2022-01-05T07:54:51.986Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux设备模型&quot;&gt;Linux设备模型&lt;/h1&gt;
&lt;p&gt;本文简要分析了linux设备文件系统&lt;code&gt;sysfs&lt;/code&gt;的原理。
    
    </summary>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/categories/linux-kernel/"/>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/tags/linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>从.c文件到程序的执行，中间发生了什么？</title>
    <link href="https://jyke.xyz/posts/8966.html"/>
    <id>https://jyke.xyz/posts/8966.html</id>
    <published>2021-12-29T07:56:59.000Z</published>
    <updated>2021-12-29T08:20:12.641Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引子&quot;&gt;引子&lt;/h2&gt;
&lt;p&gt;本篇文章是作者阅读&lt;a href=&quot;https://book.douban.com/subject/30350365/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《庖丁解牛Linux内核分析》&lt;/a&gt;一书中的第七章————“可执行程序的工作原理”的读书笔记，这篇文章要解决的两个问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个.c源代码文件是如何编译成可执行文件的？&lt;/li&gt;
&lt;li&gt;当我们在shell中执行一个可执行程序时，发生了什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这两个问题，本文首先介绍了ELF文件格式，其次完整地概括了程序的编译过程，最后总结了可执行程序在Linux中的装载过程。
    
    </summary>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/categories/linux-kernel/"/>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/tags/linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>汇编语法基础</title>
    <link href="https://jyke.xyz/posts/20167.html"/>
    <id>https://jyke.xyz/posts/20167.html</id>
    <published>2021-12-20T04:20:21.000Z</published>
    <updated>2021-12-20T09:44:10.685Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很基本的汇编语法基础，在学习linux kernel的过程中经常会出现一些汇编代码，特在此记录一些基础用法，以便查阅。&lt;/p&gt;
&lt;p&gt;本文主要总结了以下几个部分的知识：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;为了理解汇编语句而需要了解的CPU寄存器；&lt;/li&gt;
&lt;li&gt;简单汇编语句的语法规则；&lt;/li&gt;
&lt;li&gt;函数调用在汇编层面的实现以及如何实现的函数调用堆栈；&lt;/li&gt;
&lt;li&gt;C语言中嵌入式汇编代码的基本语法&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="汇编" scheme="https://jyke.xyz/categories/%E6%B1%87%E7%BC%96/"/>
    
    
      <category term="汇编" scheme="https://jyke.xyz/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>再探虚拟内存</title>
    <link href="https://jyke.xyz/posts/5863.html"/>
    <id>https://jyke.xyz/posts/5863.html</id>
    <published>2021-12-16T04:55:01.000Z</published>
    <updated>2021-12-16T05:22:04.013Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文是笔者读《深入理解操作系统》的虚拟内存部分的读书笔记。本文总结了书中提到的虚拟内存的这几个方面：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;虚拟内存的作用；&lt;/li&gt;
&lt;li&gt;引入虚拟内存后，地址翻译的过程&lt;/li&gt;
&lt;li&gt;TLB和cache的结合使用&lt;/li&gt;
&lt;li&gt;多级页表的引入&lt;/li&gt;
&lt;li&gt;Linux中虚拟内存的组织方式&lt;/li&gt;
&lt;li&gt;内存映射和共享对象/私有对象&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>KVM原理简介</title>
    <link href="https://jyke.xyz/posts/17969.html"/>
    <id>https://jyke.xyz/posts/17969.html</id>
    <published>2021-12-16T04:45:36.000Z</published>
    <updated>2021-12-16T04:50:43.338Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;本文总结了&lt;a href=&quot;https://book.douban.com/subject/30544350/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《KVM实战：原理、进阶与性能调优》&lt;/a&gt;一书中的KVM原理简介部分，这一部分主要介绍了KVM虚拟化的&lt;strong&gt;基本原理&lt;/strong&gt;，从硬件到软件、从底层到上层都做了一些介绍，包括：&lt;strong&gt;硬件虚拟化技术简介、KVM软件架构概况、KVM内核模块、QEMU用户态设备模拟、与KVM结合的vhost-net等组件、KVM的管理工具等。&lt;/strong&gt;由于KVM是基于硬件辅助的虚拟化软件，故在第一节又分别介绍了CPU虚拟化、内存虚拟化、I/O虚拟化以及Intel 的虚拟化技术发展情况，以帮助读者理解虚拟化原理。&lt;/p&gt;
&lt;p&gt;如果你想：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;大概了解KVM虚拟化的基本原理；&lt;/li&gt;
&lt;li&gt;大致了解KVM和QEMU是如何配合工作的；&lt;/li&gt;
&lt;li&gt;在当今的云计算场景下，有哪些和KVM配合使用的工具；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么相信此文会对您有所帮助！:)&lt;/p&gt;
&lt;p&gt;为了更好地明白此文，您需要对以下知识需要有了解：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;虚拟内存；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="KVM" scheme="https://jyke.xyz/tags/KVM/"/>
    
  </entry>
  
  <entry>
    <title>钩子函数</title>
    <link href="https://jyke.xyz/posts/56602.html"/>
    <id>https://jyke.xyz/posts/56602.html</id>
    <published>2021-12-06T07:30:57.000Z</published>
    <updated>2021-12-06T07:53:33.134Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是钩子函数&quot;&gt;什么是钩子函数？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;钩子函数也叫回调函数&lt;/strong&gt;，是通过函数指针来实现的，那我们来看看什么是函数指针。&lt;/p&gt;
&lt;p&gt;首先看看以下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a，b；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//我们可以让指针p先后指向a, b，这样，p就先后代表了不同变量的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = &amp;amp;a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = &amp;amp;b;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="c" scheme="https://jyke.xyz/categories/c/"/>
    
    
      <category term="c" scheme="https://jyke.xyz/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>intel GPU虚拟化技术（gvt）论文笔记</title>
    <link href="https://jyke.xyz/posts/44103.html"/>
    <id>https://jyke.xyz/posts/44103.html</id>
    <published>2021-12-03T06:23:35.000Z</published>
    <updated>2021-12-03T06:32:32.620Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.usenix.org/conference/atc14/technical-sessions/presentation/tian&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="GPU" scheme="https://jyke.xyz/tags/GPU/"/>
    
      <category term="get-g" scheme="https://jyke.xyz/tags/get-g/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合</title>
    <link href="https://jyke.xyz/posts/10555.html"/>
    <id>https://jyke.xyz/posts/10555.html</id>
    <published>2021-12-01T05:17:50.000Z</published>
    <updated>2021-12-03T06:34:02.149Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ssmspringspringmvcmybatis&quot;&gt;SSM（Spring、SpringMVC、MyBatis）&lt;/h2&gt;
&lt;h3 id=&quot;整合步骤&quot;&gt;整合步骤&lt;/h3&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Mybatis配置文件的编写和相关实体类的引入&lt;/li&gt;
&lt;li&gt;编写Spring MVC配置文件
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;配置扫描控制器&lt;/li&gt;
&lt;li&gt;定义视图解析器&lt;/li&gt;
&lt;li&gt;两个标准配置&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;编写Spring配置文件
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;配置组件扫描，过滤控制器&lt;/li&gt;
&lt;li&gt;配置数据源&lt;/li&gt;
&lt;li&gt;整合Mybatis
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;目的：（1）Spring管理所有组件，mapper的实现类；（2）Spring来管理事务&lt;/li&gt;
&lt;li&gt;结果：mybatis-config.xml的大部分功能被替代了&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;引入事务管理器&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Sam" scheme="https://jyke.xyz/categories/Sam/"/>
    
    
      <category term="java" scheme="https://jyke.xyz/tags/java/"/>
    
      <category term="Sam" scheme="https://jyke.xyz/tags/Sam/"/>
    
  </entry>
  
  <entry>
    <title>Debug Linux Kernel by Qemu and GDB</title>
    <link href="https://jyke.xyz/posts/42781.html"/>
    <id>https://jyke.xyz/posts/42781.html</id>
    <published>2021-12-01T04:58:44.000Z</published>
    <updated>2021-12-23T03:13:04.612Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译内核&quot;&gt;1. 编译内核&lt;/h2&gt;
&lt;h3 id=&quot;配置选项&quot;&gt;1.1 配置选项&lt;/h3&gt;
&lt;p&gt;不同的架构有不同的默认文件，比如x86平台，可以在arch/x86/configs找到相关文件：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; junyu @ junyu &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ~/Documents/linux/arch/x86/configs on git:136057256686 o [15:56:45] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; ll&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 24K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu 5.9K 11月 30 14:24 i386_defconfig #32位系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu  147 11月 30 14:24 tiny.config  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu 5.8K 11月 30 14:24 x86_64_defconfig #64位系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu  744 11月 30 14:24 xen.config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/categories/linux-kernel/"/>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/tags/linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>虚拟内存详解</title>
    <link href="https://jyke.xyz/posts/34444.html"/>
    <id>https://jyke.xyz/posts/34444.html</id>
    <published>2021-04-15T16:28:53.000Z</published>
    <updated>2021-04-15T16:33:37.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;虚拟内存&quot;&gt;虚拟内存&lt;/h2&gt;
&lt;p&gt;虚拟内存的实现是一门复杂的学问，各种细节非常繁杂，对于这些实现的细节我们不必深究，但作为一名软件工程从业者，虚拟内存的设计思想是非常重要的，所以我们依然有必要从整体上对其的设计有一定的了解。本篇文章从以下几个方面来讨论虚拟内存，相信看完后一定会对虚拟内存会有一个总体的认识：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;为什么要有虚拟内存？、物理内存存在什么问题？&lt;/li&gt;
&lt;li&gt;什么是虚拟内存？&lt;/li&gt;
&lt;li&gt;虚拟内存的实现用到了什么技术？&lt;/li&gt;
&lt;li&gt;虚拟内存到物理内存的转换？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql中的主键、外键、索引的区别和联系</title>
    <link href="https://jyke.xyz/posts/62631.html"/>
    <id>https://jyke.xyz/posts/62631.html</id>
    <published>2021-04-15T16:27:07.000Z</published>
    <updated>2021-04-15T16:33:37.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主键&quot;&gt;主键&lt;/h2&gt;
&lt;p&gt;主键的作用：为了唯一的确定某一条记录&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;任意两条记录的主键不能重复&lt;/li&gt;
&lt;li&gt;记录一旦插入表中，主键不要修改了&lt;/li&gt;
&lt;li&gt;选取主键的原则：不使用业务相关的字段作为主键（这个字段在业务中不会用到，基本上来说就是我们自己为每条数据定义一个id）&lt;/li&gt;
&lt;li&gt;联合主键：多列确定一个数据，没有必要的时候不要用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="https://jyke.xyz/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://jyke.xyz/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Maven入门</title>
    <link href="https://jyke.xyz/posts/63612.html"/>
    <id>https://jyke.xyz/posts/63612.html</id>
    <published>2021-04-15T16:23:53.000Z</published>
    <updated>2021-04-15T16:33:37.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;maven能解决什么问题&quot;&gt;Maven能解决什么问题？&lt;/h2&gt;
&lt;p&gt;想像一个场景，我们一个项目A需要依赖一个B的jar包，如果我们去B的官网上寻找B的jar包并把它放到我们的classpath中，这个过程是非常繁琐的，因为很可能我们在一个项目中需要依赖很多个组件。&lt;/p&gt;
&lt;p&gt;通过使用Maven，可以自动解析依赖，并导入相应的依赖。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://jyke.xyz/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://jyke.xyz/tags/JAVA/"/>
    
      <category term="Maven" scheme="https://jyke.xyz/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JAVA多线程笔记</title>
    <link href="https://jyke.xyz/posts/44802.html"/>
    <id>https://jyke.xyz/posts/44802.html</id>
    <published>2021-04-13T01:21:27.000Z</published>
    <updated>2021-04-13T14:13:34.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多线程&quot;&gt;多线程&lt;/h2&gt;
&lt;p&gt;线程创建：4种方式&lt;/p&gt;
&lt;p&gt;解决线程安全问题：3种方式&lt;/p&gt;
&lt;p&gt;一个java.exe，至少有三个线程：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;main()：主线程&lt;/li&gt;
&lt;li&gt;gc()垃圾回收线程&lt;/li&gt;
&lt;li&gt;异常处理线程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并行和并发：&lt;/p&gt;
&lt;p&gt;并行：多个CPU&lt;/p&gt;
&lt;p&gt;并发：一个CPU&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA多线程" scheme="https://jyke.xyz/categories/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="JAVA" scheme="https://jyke.xyz/tags/JAVA/"/>
    
      <category term="多线程" scheme="https://jyke.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境变量</title>
    <link href="https://jyke.xyz/posts/12972.html"/>
    <id>https://jyke.xyz/posts/12972.html</id>
    <published>2021-04-02T15:12:52.000Z</published>
    <updated>2021-04-02T15:17:17.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux环境变量的分类&quot;&gt;Linux环境变量的分类&lt;/h2&gt;
&lt;p&gt;从生命周期分为：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;永久的——修改配置文件&lt;/li&gt;
&lt;li&gt;临时的——export命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从作用域分：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;系统环境变量：对所有用户生效&lt;/li&gt;
&lt;li&gt;用户环境变量：对某一个用户生效&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
      <category term="环境变量" scheme="https://jyke.xyz/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux中的动态库和静态库</title>
    <link href="https://jyke.xyz/posts/23615.html"/>
    <id>https://jyke.xyz/posts/23615.html</id>
    <published>2021-04-02T15:10:29.000Z</published>
    <updated>2021-04-02T15:15:31.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是库&quot;&gt;什么是库？&lt;/h2&gt;
&lt;p&gt;库是写好的现有的，成熟的，可以复用的代码。&lt;/p&gt;
&lt;p&gt;本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。&lt;strong&gt;库有两种：静态库（.a、.lib）和动态库（.so、.dll）。 windows上对应的是.lib .dll linux上对应的是.a .so&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Studying" scheme="https://jyke.xyz/categories/Studying/"/>
    
    
      <category term="c language" scheme="https://jyke.xyz/tags/c-language/"/>
    
  </entry>
  
  <entry>
    <title>内存对齐一把梭</title>
    <link href="https://jyke.xyz/posts/43297.html"/>
    <id>https://jyke.xyz/posts/43297.html</id>
    <published>2021-04-02T15:04:26.000Z</published>
    <updated>2021-04-02T15:15:31.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提知识&quot;&gt;前提知识&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;现代操作系统的内存空间都是按照byte划分的&lt;/li&gt;
&lt;li&gt;但是读取这些数据的时候处理器并不一定是按照字节块来读取这些数据，而是以两个字节/四个字节/八个字节...为单位来存取，具体的读取粒度根据硬件平台的不同而有所不同&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在考虑以4个字节为内存存取粒度的平台（32位系统），代表处理器只能从地址为4的倍数的内存单元处读取数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>(四)进程调度——linux内核设计与实现读书笔记</title>
    <link href="https://jyke.xyz/posts/32169.html"/>
    <id>https://jyke.xyz/posts/32169.html</id>
    <published>2021-03-25T16:41:05.000Z</published>
    <updated>2021-03-25T16:43:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;调度程序的作用：将哪个进程投入运行，以及运行多长时间&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/categories/linux-kernel/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
      <category term="linux kernel" scheme="https://jyke.xyz/tags/linux-kernel/"/>
    
      <category term="linux内核设计与实现" scheme="https://jyke.xyz/tags/linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux中的软链接和硬链接</title>
    <link href="https://jyke.xyz/posts/43970.html"/>
    <id>https://jyke.xyz/posts/43970.html</id>
    <published>2021-03-25T16:32:25.000Z</published>
    <updated>2021-03-25T16:43:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;inode号&quot;&gt;inode号&lt;/h2&gt;
&lt;p&gt;linux中文件分为两个部分：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;user data：用户数据&lt;/li&gt;
&lt;li&gt;metadata：元数据
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;文件名：方便人识别和使用&lt;/li&gt;
&lt;li&gt;inode号：文件的唯一标识，系统通过inode号找到用户数据&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;linux中查看inode号的命令：stat、ls -i&lt;/p&gt;
&lt;p&gt;文件的移动和重命名不会改变inode号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以，真正代表一个文件的是它的inode号。两个inode号一样的文件，指向的是同一个文件数据块。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux守护进程</title>
    <link href="https://jyke.xyz/posts/42035.html"/>
    <id>https://jyke.xyz/posts/42035.html</id>
    <published>2021-03-25T16:30:21.000Z</published>
    <updated>2021-03-25T16:43:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前台任务与后台任务&quot;&gt;前台任务与后台任务&lt;/h2&gt;
&lt;p&gt;前台任务：独占命令行窗口，只有运行完了或者手动中止，才能执行其他命令。&lt;/p&gt;
&lt;p&gt;后台任务：只要在命令的尾部加上符号&lt;code&gt;&amp;amp;&lt;/code&gt;，启动的进程就会成为&quot;后台任务&quot;。如果要让正在运行的&quot;前台任务&quot;变为&quot;后台任务&quot;，可以先按&lt;code&gt;ctrl + z&lt;/code&gt;，然后执行&lt;code&gt;bg&lt;/code&gt;命令（让最近一个暂停的&quot;后台任务&quot;继续执行）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>VFIO入门</title>
    <link href="https://jyke.xyz/posts/11156.html"/>
    <id>https://jyke.xyz/posts/11156.html</id>
    <published>2021-03-25T15:58:15.000Z</published>
    <updated>2021-03-25T16:03:56.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/bfbb5095d8fd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前提知识&quot;&gt;前提知识&lt;/h2&gt;
&lt;h3 id=&quot;lspci命令&quot;&gt;lspci命令&lt;/h3&gt;
&lt;p&gt;加入系统装有1G的RAM，1G以后的物理内存地址空间都是外部设备IO在系统内存地址空间上的映射。/proc/iomem描述了系统中所有的设备I/O在内存地址空间上的映射。&lt;/p&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
</feed>
