<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>柯柯的博客</title>
  
  <subtitle>KK&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jyke.xyz/"/>
  <updated>2021-12-03T06:32:32.620Z</updated>
  <id>https://jyke.xyz/</id>
  
  <author>
    <name>Keke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>intel GPU虚拟化技术（gvt）论文笔记</title>
    <link href="https://jyke.xyz/posts/44103.html"/>
    <id>https://jyke.xyz/posts/44103.html</id>
    <published>2021-12-03T06:23:35.000Z</published>
    <updated>2021-12-03T06:32:32.620Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.usenix.org/conference/atc14/technical-sessions/presentation/tian&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;论文地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="GPU" scheme="https://jyke.xyz/tags/GPU/"/>
    
      <category term="get-g" scheme="https://jyke.xyz/tags/get-g/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合</title>
    <link href="https://jyke.xyz/posts/10555.html"/>
    <id>https://jyke.xyz/posts/10555.html</id>
    <published>2021-12-01T05:17:50.000Z</published>
    <updated>2021-12-03T06:29:14.991Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;ssmspringspringmvcmybatis&quot;&gt;SSM（Spring、SpringMVC、MyBatis）&lt;/h2&gt;
&lt;h3 id=&quot;整合步骤&quot;&gt;整合步骤&lt;/h3&gt;
&lt;ol
        
      
    
    </summary>
    
    
      <category term="Sam" scheme="https://jyke.xyz/categories/Sam/"/>
    
    
      <category term="java" scheme="https://jyke.xyz/tags/java/"/>
    
      <category term="Sam" scheme="https://jyke.xyz/tags/Sam/"/>
    
  </entry>
  
  <entry>
    <title>Debug Linux Kernel by Qemu and GDB</title>
    <link href="https://jyke.xyz/posts/42781.html"/>
    <id>https://jyke.xyz/posts/42781.html</id>
    <published>2021-12-01T04:58:44.000Z</published>
    <updated>2021-12-03T06:29:14.987Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;编译内核&quot;&gt;1. 编译内核&lt;/h2&gt;
&lt;h3 id=&quot;配置选项&quot;&gt;1.1 配置选项&lt;/h3&gt;
&lt;p&gt;不同的架构有不同的默认文件，比如x86平台，可以在arch/x86/configs找到相关文件：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; junyu @ junyu &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ~/Documents/linux/arch/x86/configs on git:136057256686 o [15:56:45] &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; ll&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 24K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu 5.9K 11月 30 14:24 i386_defconfig #32位系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu  147 11月 30 14:24 tiny.config  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu 5.8K 11月 30 14:24 x86_64_defconfig #64位系统&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-rw-r-- 1 junyu junyu  744 11月 30 14:24 xen.config&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/categories/linux-kernel/"/>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/tags/linux-kernel/"/>
    
  </entry>
  
  <entry>
    <title>虚拟内存详解</title>
    <link href="https://jyke.xyz/posts/34444.html"/>
    <id>https://jyke.xyz/posts/34444.html</id>
    <published>2021-04-15T16:28:53.000Z</published>
    <updated>2021-04-15T16:33:37.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;虚拟内存&quot;&gt;虚拟内存&lt;/h2&gt;
&lt;p&gt;虚拟内存的实现是一门复杂的学问，各种细节非常繁杂，对于这些实现的细节我们不必深究，但作为一名软件工程从业者，虚拟内存的设计思想是非常重要的，所以我们依然有必要从整体上对其的设计有一定的了解。本篇文章从以下几个方面来讨论虚拟内存，相信看完后一定会对虚拟内存会有一个总体的认识：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;为什么要有虚拟内存？、物理内存存在什么问题？&lt;/li&gt;
&lt;li&gt;什么是虚拟内存？&lt;/li&gt;
&lt;li&gt;虚拟内存的实现用到了什么技术？&lt;/li&gt;
&lt;li&gt;虚拟内存到物理内存的转换？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql中的主键、外键、索引的区别和联系</title>
    <link href="https://jyke.xyz/posts/62631.html"/>
    <id>https://jyke.xyz/posts/62631.html</id>
    <published>2021-04-15T16:27:07.000Z</published>
    <updated>2021-04-15T16:33:37.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;主键&quot;&gt;主键&lt;/h2&gt;
&lt;p&gt;主键的作用：为了唯一的确定某一条记录&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;任意两条记录的主键不能重复&lt;/li&gt;
&lt;li&gt;记录一旦插入表中，主键不要修改了&lt;/li&gt;
&lt;li&gt;选取主键的原则：不使用业务相关的字段作为主键（这个字段在业务中不会用到，基本上来说就是我们自己为每条数据定义一个id）&lt;/li&gt;
&lt;li&gt;联合主键：多列确定一个数据，没有必要的时候不要用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Mysql" scheme="https://jyke.xyz/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://jyke.xyz/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Maven入门</title>
    <link href="https://jyke.xyz/posts/63612.html"/>
    <id>https://jyke.xyz/posts/63612.html</id>
    <published>2021-04-15T16:23:53.000Z</published>
    <updated>2021-04-15T16:33:37.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;maven能解决什么问题&quot;&gt;Maven能解决什么问题？&lt;/h2&gt;
&lt;p&gt;想像一个场景，我们一个项目A需要依赖一个B的jar包，如果我们去B的官网上寻找B的jar包并把它放到我们的classpath中，这个过程是非常繁琐的，因为很可能我们在一个项目中需要依赖很多个组件。&lt;/p&gt;
&lt;p&gt;通过使用Maven，可以自动解析依赖，并导入相应的依赖。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://jyke.xyz/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://jyke.xyz/tags/JAVA/"/>
    
      <category term="Maven" scheme="https://jyke.xyz/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>JAVA多线程笔记</title>
    <link href="https://jyke.xyz/posts/44802.html"/>
    <id>https://jyke.xyz/posts/44802.html</id>
    <published>2021-04-13T01:21:27.000Z</published>
    <updated>2021-04-13T14:13:34.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多线程&quot;&gt;多线程&lt;/h2&gt;
&lt;p&gt;线程创建：4种方式&lt;/p&gt;
&lt;p&gt;解决线程安全问题：3种方式&lt;/p&gt;
&lt;p&gt;一个java.exe，至少有三个线程：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;main()：主线程&lt;/li&gt;
&lt;li&gt;gc()垃圾回收线程&lt;/li&gt;
&lt;li&gt;异常处理线程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并行和并发：&lt;/p&gt;
&lt;p&gt;并行：多个CPU&lt;/p&gt;
&lt;p&gt;并发：一个CPU&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA多线程" scheme="https://jyke.xyz/categories/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="JAVA" scheme="https://jyke.xyz/tags/JAVA/"/>
    
      <category term="多线程" scheme="https://jyke.xyz/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境变量</title>
    <link href="https://jyke.xyz/posts/12972.html"/>
    <id>https://jyke.xyz/posts/12972.html</id>
    <published>2021-04-02T15:12:52.000Z</published>
    <updated>2021-04-02T15:17:17.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux环境变量的分类&quot;&gt;Linux环境变量的分类&lt;/h2&gt;
&lt;p&gt;从生命周期分为：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;永久的——修改配置文件&lt;/li&gt;
&lt;li&gt;临时的——export命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从作用域分：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;系统环境变量：对所有用户生效&lt;/li&gt;
&lt;li&gt;用户环境变量：对某一个用户生效&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
      <category term="环境变量" scheme="https://jyke.xyz/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux中的动态库和静态库</title>
    <link href="https://jyke.xyz/posts/23615.html"/>
    <id>https://jyke.xyz/posts/23615.html</id>
    <published>2021-04-02T15:10:29.000Z</published>
    <updated>2021-04-02T15:15:31.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是库&quot;&gt;什么是库？&lt;/h2&gt;
&lt;p&gt;库是写好的现有的，成熟的，可以复用的代码。&lt;/p&gt;
&lt;p&gt;本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。&lt;strong&gt;库有两种：静态库（.a、.lib）和动态库（.so、.dll）。 windows上对应的是.lib .dll linux上对应的是.a .so&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Studying" scheme="https://jyke.xyz/categories/Studying/"/>
    
    
      <category term="c language" scheme="https://jyke.xyz/tags/c-language/"/>
    
  </entry>
  
  <entry>
    <title>内存对齐一把梭</title>
    <link href="https://jyke.xyz/posts/43297.html"/>
    <id>https://jyke.xyz/posts/43297.html</id>
    <published>2021-04-02T15:04:26.000Z</published>
    <updated>2021-04-02T15:15:31.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提知识&quot;&gt;前提知识&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;现代操作系统的内存空间都是按照byte划分的&lt;/li&gt;
&lt;li&gt;但是读取这些数据的时候处理器并不一定是按照字节块来读取这些数据，而是以两个字节/四个字节/八个字节...为单位来存取，具体的读取粒度根据硬件平台的不同而有所不同&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在考虑以4个字节为内存存取粒度的平台（32位系统），代表处理器只能从地址为4的倍数的内存单元处读取数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://jyke.xyz/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>(四)进程调度——linux内核设计与实现读书笔记</title>
    <link href="https://jyke.xyz/posts/32169.html"/>
    <id>https://jyke.xyz/posts/32169.html</id>
    <published>2021-03-25T16:41:05.000Z</published>
    <updated>2021-03-25T16:43:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;调度程序的作用：将哪个进程投入运行，以及运行多长时间&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux kernel" scheme="https://jyke.xyz/categories/linux-kernel/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
      <category term="linux kernel" scheme="https://jyke.xyz/tags/linux-kernel/"/>
    
      <category term="linux内核设计与实现" scheme="https://jyke.xyz/tags/linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux中的软链接和硬链接</title>
    <link href="https://jyke.xyz/posts/43970.html"/>
    <id>https://jyke.xyz/posts/43970.html</id>
    <published>2021-03-25T16:32:25.000Z</published>
    <updated>2021-03-25T16:43:00.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;inode号&quot;&gt;inode号&lt;/h2&gt;
&lt;p&gt;linux中文件分为两个部分：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;user data：用户数据&lt;/li&gt;
&lt;li&gt;metadata：元数据
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;文件名：方便人识别和使用&lt;/li&gt;
&lt;li&gt;inode号：文件的唯一标识，系统通过inode号找到用户数据&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;linux中查看inode号的命令：stat、ls -i&lt;/p&gt;
&lt;p&gt;文件的移动和重命名不会改变inode号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以，真正代表一个文件的是它的inode号。两个inode号一样的文件，指向的是同一个文件数据块。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux守护进程</title>
    <link href="https://jyke.xyz/posts/42035.html"/>
    <id>https://jyke.xyz/posts/42035.html</id>
    <published>2021-03-25T16:30:21.000Z</published>
    <updated>2021-03-25T16:43:00.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/02/linux-daemon.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前台任务与后台任务&quot;&gt;前台任务与后台任务&lt;/h2&gt;
&lt;p&gt;前台任务：独占命令行窗口，只有运行完了或者手动中止，才能执行其他命令。&lt;/p&gt;
&lt;p&gt;后台任务：只要在命令的尾部加上符号&lt;code&gt;&amp;amp;&lt;/code&gt;，启动的进程就会成为&quot;后台任务&quot;。如果要让正在运行的&quot;前台任务&quot;变为&quot;后台任务&quot;，可以先按&lt;code&gt;ctrl + z&lt;/code&gt;，然后执行&lt;code&gt;bg&lt;/code&gt;命令（让最近一个暂停的&quot;后台任务&quot;继续执行）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>VFIO入门</title>
    <link href="https://jyke.xyz/posts/11156.html"/>
    <id>https://jyke.xyz/posts/11156.html</id>
    <published>2021-03-25T15:58:15.000Z</published>
    <updated>2021-03-25T16:03:56.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/bfbb5095d8fd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前提知识&quot;&gt;前提知识&lt;/h2&gt;
&lt;h3 id=&quot;lspci命令&quot;&gt;lspci命令&lt;/h3&gt;
&lt;p&gt;加入系统装有1G的RAM，1G以后的物理内存地址空间都是外部设备IO在系统内存地址空间上的映射。/proc/iomem描述了系统中所有的设备I/O在内存地址空间上的映射。&lt;/p&gt;
    
    </summary>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化" scheme="https://jyke.xyz/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu20.04下安装mesa</title>
    <link href="https://jyke.xyz/posts/30959.html"/>
    <id>https://jyke.xyz/posts/30959.html</id>
    <published>2020-12-08T15:34:54.000Z</published>
    <updated>2020-12-08T15:36:31.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在ubuntu20.04上安装mesa&quot;&gt;在Ubuntu20.04上安装Mesa&lt;/h1&gt;
&lt;h2 id=&quot;安装meson&quot;&gt;安装Meson&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://mesonbuild.com/Quick-guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Quickstart Guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;环境准备&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install python3 python3-pip python3-setuptools python3-wheel ninja-build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装Ninja&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip3 install ninja&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
      <category term="OpenGL" scheme="https://jyke.xyz/tags/OpenGL/"/>
    
      <category term="mesa" scheme="https://jyke.xyz/tags/mesa/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核的下载与编译安装</title>
    <link href="https://jyke.xyz/posts/39689.html"/>
    <id>https://jyke.xyz/posts/39689.html</id>
    <published>2020-12-08T15:31:56.000Z</published>
    <updated>2020-12-08T15:36:31.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux内核的下载与编译安装&quot;&gt;Linux内核的下载与编译安装&lt;/h1&gt;
&lt;h2 id=&quot;两种方式获取源码&quot;&gt;两种方式获取源码&lt;/h2&gt;
&lt;p&gt;首先进入&lt;a href=&quot;https://www.kernel.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;内核官方网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;方式一：下载tarall并解压&lt;/p&gt;
&lt;p&gt;方式二：使用Git获取最新的源码：&lt;a href=&quot;https://blog.csdn.net/wukongmingjing/article/details/81353040&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内核源码一般置于/usr/src/*中，但是请不要把这些目录中的linux kernel源码用于开发&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jyke.xyz/categories/linux/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
      <category term="kernel" scheme="https://jyke.xyz/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习笔记</title>
    <link href="https://jyke.xyz/posts/59949.html"/>
    <id>https://jyke.xyz/posts/59949.html</id>
    <published>2020-11-17T15:05:16.000Z</published>
    <updated>2020-11-17T15:06:11.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最基本的两个问题&quot;&gt;最基本的两个问题&lt;/h1&gt;
&lt;h2 id=&quot;shell是什么&quot;&gt;shell是什么？&lt;/h2&gt;
&lt;p&gt;shell是一个用C语言编写的程序，是用户使用Linux的桥梁。他提供了一个界面，用户通过这个界面访问操作系统服务。&lt;/p&gt;
&lt;p&gt;而Shell脚本（Shell Script）是一种为shell编写的脚本程序。也就是我们通常说的Shell脚本编程。&lt;/p&gt;
&lt;h2 id=&quot;bash是什么&quot;&gt;bash是什么？&lt;/h2&gt;
&lt;p&gt;shell编程和其他的编程一样，需要文本编辑器和脚本解释器。&lt;/p&gt;
&lt;p&gt;而Bash是Linux的一种Shell类型，是解释脚本文件的一个shell程序。&lt;/p&gt;
&lt;p&gt;Linux的Shell种类众多，常见的有：&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://jyke.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Shell" scheme="https://jyke.xyz/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer刷题记录</title>
    <link href="https://jyke.xyz/posts/41647.html"/>
    <id>https://jyke.xyz/posts/41647.html</id>
    <published>2020-11-17T15:02:02.000Z</published>
    <updated>2020-11-26T17:23:09.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二维数组中的查找&quot;&gt;04.&lt;a href=&quot;https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二维数组中的查找&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://jyke.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://jyke.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指Offer" scheme="https://jyke.xyz/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>OpenCL, OpenGL, DirectX</title>
    <link href="https://jyke.xyz/posts/9976.html"/>
    <id>https://jyke.xyz/posts/9976.html</id>
    <published>2020-11-17T14:57:07.000Z</published>
    <updated>2020-11-17T15:06:11.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;opencl&quot;&gt;OpenCL&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;是由苹果（Apple）公司发起，业界众多著名厂商共同制作的面向异构系统通用目的并行编程的开放式、免费标准，也是一个统一的编程环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OpenCL实际上是针对异构系统进行并行编程的一个全新的API，OpenCL可以利用GPU进行一些并行计算的工作。&lt;/li&gt;
&lt;li&gt;OpenGL是针对图形的，而OpenCL则是针对并行计算的API。&lt;/li&gt;
&lt;li&gt;它是一个连接硬件和软件的API接口，OpenCL的作用就是通过调用处理器和GPU的计算资源，释放硬件潜力，让程序运行得更快更好。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://jyke.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="OpenGL" scheme="https://jyke.xyz/tags/OpenGL/"/>
    
      <category term="OpenCL" scheme="https://jyke.xyz/tags/OpenCL/"/>
    
      <category term="DirectX" scheme="https://jyke.xyz/tags/DirectX/"/>
    
  </entry>
  
  <entry>
    <title>Linux启动过程分析</title>
    <link href="https://jyke.xyz/posts/25242.html"/>
    <id>https://jyke.xyz/posts/25242.html</id>
    <published>2020-11-17T14:55:21.000Z</published>
    <updated>2020-11-17T15:06:11.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;linux启动过程分析&quot;&gt;Linux启动过程分析&lt;/h1&gt;
&lt;p&gt;以RedHat启动方式分析（Ubuntu的启动过程不太一样），可以分为5个阶段：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;引导内核&lt;/li&gt;
&lt;li&gt;运行init&lt;/li&gt;
&lt;li&gt;系统初始化&lt;/li&gt;
&lt;li&gt;建立终端&lt;/li&gt;
&lt;li&gt;用户登录&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://jyke.xyz/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://jyke.xyz/tags/linux/"/>
    
  </entry>
  
</feed>
